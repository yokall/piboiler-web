#!/usr/bin/perl

use strict;
use warnings;
use lib '/sites/pi_boiler/lib';

use Mojolicious::Lite;
use URI::Escape;
use XML::XML2JSON;
use Data::Dumper;
use PiBoiler::Model::Rooms;
use PiBoiler::Model::Temperature;


get '/' => sub {
    my $c = shift;
    $c->render(text => qq|
        <h1>API routes:</h1>
        <ul>
            <li>POST /api/create_room - add new room</li>
            <li>POST /api/log_temperature - set up temp from pi</li>

            <li>GET /api/get_temperature - Get Actual Temp of room</li>
            <li>GET /api/get_temperature_schedule - Get temperature Schedule for room</li>
            <li>GET /api/get_scheduled_temperature - Get scheduled temperature for room</li>
            <li>GET /api/get_all_rooms_details - Get Details for All Rooms</li>

            <li>PUT /api/update_schedule - update temperature schedule</li>
            <li>DEL /api/delete_room - delete room</li>

        </ul>
    |, format => 'html');
};

post '/api/create_room' => sub {
    my $self  = shift;

    warn "IN CREATE ROOM";

    my $data = $self->req->body;

    #$data = qq|{"Room Details":|.$data."}";

    my $json_converter = XML::XML2JSON->new();
    my $rooms_hash_ref = $json_converter->json2obj($data);

    my $room = $rooms_hash_ref->{'room_name'};
    my $sensor_id = $rooms_hash_ref->{'sensor_id'};

    my ($id, $error) = PiBoiler::Model::Rooms::create_room($room, $sensor_id);

    if ($error) {
        return $self->render(json => {message => "Failed to add room: ".$error}, status => 500);
    }
    else {
        return $self->render(json => {room_id => $id});
    }
};

post '/api/log_temperature' => sub {
    my $self  = shift;

    warn "IN LOG TEMP";

    my $data = $self->req->body;

    my $json_converter = XML::XML2JSON->new();
    my $temp_hash_ref = $json_converter->json2obj($data);

    my $temperature = $temp_hash_ref->{'temp'};
    my $date_time = $temp_hash_ref->{'date_time'};
    my $sensor_id = $temp_hash_ref->{'sensor_id'};

    #Get Room using Sensor Id.
    my ($room_id) = PiBoiler::Model::Rooms::query_room_by_sensor($sensor_id);
    warn "room_id $room_id";
    my ($temp_id, $temp_error) = PiBoiler::Model::Temperature::create_temperature($temperature, $date_time, $room_id);

    if ($temp_error) {
        return $self->render(json => {message => "Failed to log temperature: ".$temp_error}, status => 500);
    }
    else {
        return $self->render(json => {temp_id => $temp_id});
    }

};

get '/api/get_temperature' => sub {
    my $self  = shift;

    warn "IN Get Temperature";

    my $data = $self->req->body;

    my $json_converter = XML::XML2JSON->new();
    my $temperature_hash_ref = $json_converter->json2obj($data);

    my $room_name = $temperature_hash_ref->{'room_name'};

    my ($room_id, $error) = PiBoiler::Model::Rooms::query_room_by_name($room_name);

    warn "Room Id $room_id";

    my ($temp_ref, $temp_error) = PiBoiler::Model::Temperature::query_temperature_details($room_id);

    warn Dumper($temp_ref);

    if ($error) {
        return $self->render(json => {message => "Failed to add room: ".$error}, status => 500);
    }
    else {
        return $self->render(json => $temp_ref);
    }
};

get '/api/get_all_rooms_details' => sub {
    my $self  = shift;

    warn "IN Get All Temperatures";

    my $data = $self->req->body;

    my $json_converter = XML::XML2JSON->new();
    my $temperature_hash_ref = $json_converter->json2obj($data);

    my %temperature_hash = %{$temperature_hash_ref};

    my $error;
    my %room_info;
    my %all_details;
    foreach my $room_name (keys %temperature_hash) {
        my ($room_id, $error) = PiBoiler::Model::Rooms::query_room_by_name($room_name);
        $room_info{$room_name} = $room_id;
    }

    warn "Room Info";
    warn Dumper(\%room_info);

    foreach my $room_name (keys %room_info) {
        my $room_id = $room_info{$room_name};
        my ($temp_info, $error) = PiBoiler::Model::Temperature::query_all_temperature_details($room_id);
        warn "Room Name $room_name";
        warn "Temp Info";
        warn Dumper($temp_info);
        $all_details{$room_name} = $temp_info;
    }

    warn "All Details";
    warn Dumper(\%all_details);

    if ($error) {
        return $self->render(json => {message => "Failed to get all temperature details room: ".$error}, status => 500);
    }
    else {
        return $self->render(json => \%all_details);
    }

};

app->start;
